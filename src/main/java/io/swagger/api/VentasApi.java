/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.VentasRegistro;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-10-12T13:40:53.224Z[GMT]")
@Validated
public interface VentasApi {

    Logger log = LoggerFactory.getLogger(VentasApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "obtiene todas las ventas", description = "Segun los parametros que se le den dara ese numero de registros", tags = {
            "usuario" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "busqueda exitosa", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VentasRegistro.class)))),

            @ApiResponse(responseCode = "400", description = "parametros erroneos (0 - 50)") })
    @RequestMapping(value = "/ventas", produces = { "application/json" }, method = RequestMethod.GET)
    default ResponseEntity<List<VentasRegistro>> buscarVentas(
            @Parameter(in = ParameterIn.QUERY, description = "define los estados de la venta que se mostraran", schema = @Schema()) @Valid @RequestParam(value = "estadoVenta", required = false) String estadoVenta,
            @Min(0) @Parameter(in = ParameterIn.QUERY, description = "registros que se saltaran", schema = @Schema(allowableValues = {})) @Valid @RequestParam(value = "salta", required = false) Integer salta,
            @Min(0) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "el numero de registros que se mostraran a partir del inicio", schema = @Schema(allowableValues = {}, maximum = "50")) @Valid @RequestParam(value = "limite", required = false) Integer limite) {
                System.out.println(getObjectMapper().isPresent());
                System.out.println(getAcceptHeader().isPresent());
        if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    System.out.println(estadoVenta);
                    System.out.println(salta);
                    System.out.println(limite);
                    return new ResponseEntity<>(getObjectMapper().get().readValue(
                            "[ {\n  \"fecha\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"nombreCliente\" : \"Alfonso Jari Maya Hernandez\",\n  \"direccionCliente\" : \"5 de Mayo 14A\",\n  \"telefonoCliente\" : \"2721613244\",\n  \"pedidos\" : [ {\n    \"servicio\" : \"Lavanderia\",\n    \"tipoServicio\" : \"Normal\",\n    \"cantidad\" : 5\n  }, {\n    \"servicio\" : \"Lavanderia\",\n    \"tipoServicio\" : \"Normal\",\n    \"cantidad\" : 5\n  } ]\n}]",
                            List.class), HttpStatus.NOT_IMPLEMENTED);
                            
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn(
                    "ObjectMapper or HttpServletRequest not configured in default VentasApi interface so no example is generated");
        }
        System.out.println("sd"+estadoVenta);
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @Operation(summary = "a√±ade un registro de venta", description = "Crea una venta nueva en la base de datos", tags = {
            "usuario" })
    @ApiResponses(value = { @ApiResponse(responseCode = "201", description = "registro creado"),

            @ApiResponse(responseCode = "400", description = "entrada invalida, objeto invalido"),

            @ApiResponse(responseCode = "409", description = "ya existe el registro (campos duplicados)") })
    @RequestMapping(value = "/ventas", consumes = { "application/json" }, method = RequestMethod.POST)
    default ResponseEntity<Void> crearVenta(
            @Parameter(in = ParameterIn.DEFAULT, description = "Venta a registrar", schema = @Schema()) @Valid @RequestBody VentasRegistro body) {
        if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn(
                    "ObjectMapper or HttpServletRequest not configured in default VentasApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
